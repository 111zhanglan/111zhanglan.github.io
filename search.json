[{"title":"Mock.js","url":"/2022/06/15/Mock-js/","content":"上课听了老师说关于后端接口的问题 ,在我们前端如果需要测试渲染的时候，后端也没给数据这样就得自己造\n使用mockjs项目安装mock\nnpm install mockjs\n\n项目中新建mock文件\n//引入mock模块import Mock from &#x27;mockjs&#x27;\n\n将mock文件在main.js中导入\nimport Vue from &#x27;vue&#x27;import App FROM &#x27;./App.vue&#x27;import &#x27;./mock/index.js&#x27;Vue.config.productionTip = falsenew Vue(&#123;\trender:h =&gt; h(App),&#125;).$mount(&#x27;#app&#x27;)\n\nmock语法生成字符串\n生成指定次数字符串\n\nimport Mock from &#x27;mockjs&#x27;const data = Mock.mock(&#123;&quot;string|4&quot;:&quot;哈哈&quot;&#125;)\n\n\n生成指定范围长度字符串\n\nconst data = Mock.mock(&#123;&quot;string|1-8&quot;:&quot;哈哈&quot;&#125;)\n\n生成文本\n生成一个随机字符串\n\nconst data = Mock.mock(&#123;\t&quot;string&quot;:&quot;@cword&quot;&#125;) \n\n\n生成指定长度和范围\n\nconst data = Mock.mock(&#123;    string:&quot;@cword(1)&quot;    str :&quot;@cword(10,15)&quot;&#125;)\n\n生成标题和句子\n生成标题和句子\n\nconst data = Mock.mock(&#123;    title:&quot;@ctitle(8)&quot;    sentence:&quot;@csentence&quot;&#125;)\n\n\n生成指定长度的标题和句子\n\nconst data = Mock.mock(&#123;    title:&quot;@ctitle(8)&quot;    sentence:&quot;@csentence(50)&quot;&#125;)\n\n\n生成指定范围的\n\nconst data = Mock.mock(&#123;    title:&quot;@ctitle(5,8)&quot;    sentence:&quot;@csentence(50,100)&quot;&#125;)\n\n生成段落\n随机生成段落\n\nconst data = Mock.mock(&#123;  content:&quot;@cparagraph()&quot;&#125;)\n\n生成数字\n生成指定数字\n\nconst data = Mock.mock(&#123;\t&quot;number|80&quot;:1&#125;)\n\n\n生成范围数字\n\nconst data = Mock.mock(&#123;\t&quot;number|1-99&quot;:1&#125;)\n\n生成自增id\n随机生成标识\n\nconst data = Mock.mock(&#123;\tid:&quot;@increment&quot;&#125;)\n\n生成姓名-地址-身份证\n随机生成姓名-地址-身份证\n\nconst data = Mock.mock(&#123;\tname:&quot;@cname()&quot;\tidCard:&quot;@id()&quot;\taddress:&quot;@city(true)&quot;&#125;)\n\n随机生成图片\n生成图片：@image（“300*200”，‘#ff0000’,’#fff’,’gif’,’坤坤’）\n参数1：图片大小\n\n[\t&#x27;300*250&#x27;,&#x27;250*250&#x27;,&#x27;240*400&#x27;,&#x27;336*280&#x27;\t&#x27;180*150&#x27;,&#x27;720*300&#x27;,&#x27;468*60&#x27;,&#x27;234*60&#x27;\t&#x27;388*31&#x27;,&#x27;250*250&#x27;,&#x27;240*400&#x27;,&#x27;120*40&#x27;\t&#x27;125*125&#x27;,&#x27;250*250&#x27;,&#x27;240*400&#x27;,&#x27;336*280&#x27;]\n\n\n参数2：图片背景色\n\n参数3：图片前景色\n\n参数4：图片格式\n\n参数5：图片文字\n\n\n生成时间\n@Date\n生成指定格式时间：@date(yyyy-MM-dd hh:mm:ss)\n\n指定数组返回的参数\n\n指定长度：‘date|5’\n指定范围:’data|5-10’\n\nconst data = Mock.mock(&#123;&#x27;list|50-99&#x27;:[        &#123;            name:&#x27;@cname&#x27;            address:&#x27;@city(true)&#x27;            id:&#x27;@increment()&#x27;        &#125;\t    ]&#125;)\n\nmock拦截请求定义get请求Mock.mock(&#x27;api/get/news&#x27;,&#x27;get&#x27;,()=&gt;&#123;    return&#123;        status:200,        message:&quot;获取数据成功&quot;    &#125;&#125;)\n\n定义post请求Mock.mock(&#x27;api/post/news&#x27;,&#x27;post&#x27;,()=&gt;&#123;    return&#123;        status:200,        message:&quot;获取数据成功&quot;    &#125;&#125;)\n\n模拟一个登录请求async Login () &#123;    const res = await this.$http.post(&#x27;http://www.mock.com&#x27;,&#123;username:username,password:pasword&#125;)&#125;\n\nMock.js 建立数据拦截请求\n//用户信息数据let userInfo = [    &#123; username:&#x27;zs&#x27;,password:123456&#125;,    &#123; username:&#x27;ls&#x27;,password:123&#125;,    &#123; username:&#x27;yy&#x27;,password:456&#125;,]Mock.mock(&#x27;http://www.mock.com&#x27;,function(options)&#123;    console.log(options)//截取到post过来的数据     // 准备校验    let info = JSON.parse(options.body);  //抽取body并转化json    console.log(info);    let flag = false;    //遍历比对账号与密码    for(let i in userInfo)&#123;        if(userInfo[i].username == info.username &amp;&amp; userInfo[i].password == info.password)&#123;              flag = true ;              break;        &#125;    &#125;    if(flag)&#123;         return &#123;            code:200,            msg:&#x27;登录成功&#x27;,            Token:&#x27;Bera1242432567tgdhbshdgyu34y23885723&#x27;,        &#125;    &#125;else&#123;          return &#123;            code:400,            msg:&#x27;登录失败&#x27;,            &#125;    &#125;&#125;)\n\n","categories":[],"tags":["js插件"]},{"title":"利用HEXO+Github搭建属于自己的博客网站","url":"/2022/06/15/myblogs/","content":"使用 hexo 和 github 搭建属于自己博客网站前言  \n这几天在刷b站上 突然看到了 利用 gihub 加上 hexo 就可以直接搭建直接的博客，从昨天傍晚一直配置到今天，慢慢摸索出来 ! 所以先整理一份流程出来\n第一步 安装相关的工具1.安装Node.js\nhttps://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi\n\n2.安装Git\nhttps://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe\n\n3.打开cmd命令分别执行 检查是否安装成功\nnode -vnpm -vgit --version\n\n4.安装 Hexo\nnpm install hexo-cli -g//检查是否安装成功hexo -v\n\n第二步 配置github到这一步如果所有都安装成功，并测试无问题，那么本地配置已经搞定，下面开始在github上建项目\n在github上创建并设置远程仓库\n在Repository name下面填写你要创建的地址，这个地址是就是你的域名，以github.io结尾。**例如填写wapchief.github.io以后就在地址栏直接输入wapchief.github.io就可以访问网站\n下面要做的就是使用hexo模板将源码放到github。1.创建一个博客文件夹 \n//鼠标右键 git bash here \n\n1.npm install hexo --save\n\n2.hexo init \n\n3.npm install\n\n4.hexo g\n\n5.hexo s\n\n\n然后相当于开启了一个本地的服务器，会提升拷贝 浏览器\n随后打开进去就相当于配置本地hexo 模板成功！\n\n非常重要一步 初始化hexo 后到 该目录下的 _config.yml  文件下进行 github连接配置\ndeploy:  type: git  repository: https://github.com/111zhanglan/111zhanglan.github.io.git  branch: main\n\n安装主题、去 hexo 官方文档上 \nhttps://hexo.io/zh-cn/\n\n下载完 主题包后放置在 该目录下\n\n 随后到该主题文件下 的  _config.yml 下配置\n其他更多配置可以看看 主题的文档或者hexo官方文档了\n配置好后 我们就可以提交到github上了\nhexo ghexo shexo d\n\n最后就是最重要的写文章咯\nhexo new &#x27;文章名称&#x27;\n\n在文件夹的source目录下的 _posts 文件夹下 就会自动生成 一个文章的md文件 \n\n总结 过程中遇到的一些问题由于md文档的图片显示会与部署上去的图片地址不一\n解决方法\n1.添加依赖\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n\n2.然后把_config.yml中的post_asset_folder设为true，这个配置的意思是每次new post一个博客，会增加一个和博客同名的文件夹。\n\n3.把图!片放到.md文件的同名文件夹里，最后在.md文件中引用图片\n![图片描述]（./包名/NO.01.001.jpg）\n\n","categories":[],"tags":["分享"]}]