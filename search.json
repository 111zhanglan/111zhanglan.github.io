[{"title":"String的内置方法","url":"/2022/06/17/String%E7%9A%84%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/","content":"字符串前言在日常开发中，String 对象（字符串对象）的使用频率是非常高的,所以非常有必要记录熟悉这些方法\ntips：需要注意的是：字符串的所有方法，都不会改变原字符串（字符串的不可变性），操作完成后会返回一个新的值。\n字符串的常见方法如下。\n查找字符串1、indexOf()&#x2F;lastIndexOf()：获取字符串中指定内容的索引\n语法1：\n索引值 = str.indexOf(想要查询的字符串);\n\n可以检索一个字符串中是否含有指定内容。如果字符串中含有该内容，则会返回其第一次出现的索引；如果没有找到指定的内容，则返回 -1。\n因此可以得出一个重要技巧：\n\n如果获取的索引值为 0，说明字符串是以查询的参数为开头的。\n如果获取的索引值为-1，说明这个字符串中没有指定的内容。\n\n语法2：\n这个方法还可以指定第二个参数，用来指定查找的起始位置。语法如下：\n索引值 = str.indexOf(想要查询的字符串, [起始位置]);\n\n2、search()：获取字符串中指定内容的索引（参数里一般是正则）\n语法：\n索引值 = str.search(想要查找的字符串);索引值 = str.search(正则表达式);\n\n3、includes()：字符串中是否包含指定的内容\n语法：\n布尔值 = str.includes(想要查找的字符串, [position]);\n\n解释：判断一个字符串中是否含有指定内容。如果字符串中含有该内容，则会返回 true；否则返回 false。\n参数中的 position：如果不指定，则默认为0；如果指定，则规定了检索的起始位置。\n4、startsWith()：字符串是否以指定的内容开头\n语法:\n布尔值 = str.startsWith(想要查找的内容, [position]);\n\n解释：判断一个字符串是否以指定的子字符串开头。如果是，则返回 true；否则返回 false。\n参数中的position：\n\n如果不指定，则默认为0。\n\n如果指定，则规定了检索的起始位置。检索的范围包括：这个指定位置开始，直到字符串的末尾。即：[position, str.length)\n\n\n5、endsWith()：字符串是否以指定的内容结尾\n语法：\n布尔值 = str.endsWith(想要查找的内容, [position]);\n\n解释：判断一个字符串是否以指定的子字符串结尾。如果是，则返回 true；否则返回 false。\n获取指定位置的字符1、charAt(index)\n语法:\n字符 = str.charAt(index);\n\n解释：返回字符串指定位置的字符。这里的 str.charAt(index)和str[index]的效果是一样的。\n代码举例：\nvar str = new String(&#x27;smyhvae&#x27;);for (var i = 0; i &lt; str.length; i++) &#123;    console.log(str.charAt(i));&#125;\n\n2、str[index]\nstr.charAt(index)和str[index]的效果是一样的，不再赘述。区别在于：str[index]是 H5 标准里新增的特性。\n字符串截取1、slice()\n\nslice() 方法用的最多。\n\n语法：\n新字符串 = str.slice(开始索引, 结束索引); //两个参数都是索引值。包左不包右。\n\n注意：上面的参数，包左不包右。参数举例如下：\n\n(2, 5) 截取时，包左不包右。\n\n(2) 表示从指定的索引位置开始，截取到最后。\n\n(-3) 表示从倒数第三个开始，截取到最后。\n\n(1, -1) 表示从第一个截取到倒数第一个。\n\n(5, 2) 表示前面的大，后面的小，返回值为空。\n\n\n2、substring()\n语法：\n新字符串 = str.substring(开始索引, 结束索引); //两个参数都是索引值。包左不包右。\n\nsubstring()和slice()是类似的。但不同之处在于：\n\nsubstring()不能接受负值作为参数。如果传递了一个负值，则默认使用 0。\n\nsubstring()还会自动调整参数的位置，如果第二个参数小于第一个，则自动交换。比如说， substring(1, 0)相当于截取的是第一个字符。\n\n\n3、substr()\n语法:\n字符串 = str.substr(开始索引, 截取的长度);\n\n解释：从字符串中截取指定的内容。不会修改原字符串，而是将截取到的内容返回。\n注意，这个方法的第二个参数截取的长度，不是结束索引。\n参数举例：\n\n(2,4) 从索引值为 2 的字符开始，截取 4 个字符。\n\n(1) 从指定位置开始，截取到最后。\n\n(-3) 从倒数第几个开始，截取到最后。\n\n\nconcat()\n语法：\n新字符串 = str1.concat(str2)； //连接两个字符串\n\n解释：字符串的连接。\n这种方法基本不用，直接把两个字符串相加就好。\n是的，你会发现，数组中也有concat()方法，用于数组的连接。这个方法在数组中用得挺多的。\nsplit()：字符串转换为数组 【重要】语法：\n新的数组 = str.split(分隔符);\n\n代码举例\n//split()方法：字符串变数组var str3 = &#x27;千古壹号|qianguyihao|许嵩&#x27;;console.log(&#x27;结果1：&#x27; +str3.split()); // 无参数，表示：把整个字符串作为一个元素添加到数组中。console.log(str3.split(&#x27;&#x27;)); // 参数为空字符串，则表示：分隔字符串中每一个字符，分别添加到数组中console.log(str3.split(&#x27;|&#x27;)); // 参数为指定字符，表示：用 &#x27;|&#x27; 分隔字符串。此分隔符将不会出现在数组的任意一个元素中console.log(str3.split(&#x27;许&#x27;)); // 同上\n\n\nreplace()\n语法：\n新的字符串 = str.replace(被替换的子串，新的子串);\n\n代码举例：\n//replace()方法：替换var str2 = &#x27;Today is fine day,today is fine day !&#x27;;console.log(str2);console.log(str2.replace(&#x27;today&#x27;, &#x27;tomorrow&#x27;)); //只能替换第一个todayconsole.log(str2.replace(/today/gi, &#x27;tomorrow&#x27;)); //这里用到了正则，才能替换所有的today\n\nrepeat()：重复字符串\n语法\nnewStr = str.repeat(重复的次数);\n\n举例：\nconst telephone = &#x27;13088889999&#x27;;const mix_telephone = telephone.slice(0, -4) + &#x27;*&#x27;.repeat(4); // 模糊电话号码的后四位console.log(telephone); // 打印结果：13088889999console.log(mix_telephone); // 打印结果：1308888****\n\ntrim()\ntrim()：去除字符串前后的空白。\n大小写转换\nvar str = &#x27;abcdEFG&#x27;;//转换成小写console.log(str.toLowerCase());//转换成大写console.log(str.toUpperCase());\n\n经典例题\n1.”smyhvaevaesmyh”查找字符串中所有 m 出现的位置。\nvar str2 = &#x27;smyhvaevaesmyh&#x27;;for (var i = 0; i &lt; str2.length; i++) &#123;    //如果指定位置的符号=== &quot;o&quot;    //str2[i]    if (str2.charAt(i) === &#x27;m&#x27;) &#123;        console.log(i);    &#125;&#125;\n\n练习 2：判断一个字符串中出现次数最多的字符，统计这个次数\nvar str2 = &#x27;smyhvaevaesmyhvae&#x27;;  //定义一个json，然后判断json中是够有该属性，如果有该属性，那么值+1;否则创建一个该属性，并赋值为1；  var json = &#123;&#125;;  for (var i = 0; i &lt; str2.length; i++) &#123;      //判断：如果有该属性，那么值+1;否则创建一个该属性，并赋值为1；      var key = str2.charAt(i);      if (json[key] === undefined) &#123;          json[key] = 1;      &#125; else &#123;          json[key] += 1;      &#125;  &#125;  console.log(json);  console.log(&#x27;----------------&#x27;);  //获取json中属性值最大的选项  var maxKey = &#x27;&#x27;;  var maxValue = 0;  for (var k in json) &#123;      //        if(maxKey == &quot;&quot;)&#123;      //            maxKey = k;      //            maxValue = json[k];      //        &#125;else&#123;      if (json[k] &gt; maxValue) &#123;          maxKey = k;          maxValue = json[k];      &#125;      //        &#125;  &#125;  console.log(maxKey);  console.log(maxValue);\n\n","categories":[],"tags":["JavaScript"]},{"title":"JS基本数据类型与引用类型","url":"/2022/06/16/JS%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/","content":"数据分类数据分为：静态数据，动态数据\n静态数据注：静态数据是指一些永久性的数据。一般是以文件的形式存储在硬盘上，比如文档，照片，视频等文件\n电脑关闭后，静态数据仍然还在，\n动态数据：是指在程序的运行中，动态的产生的临时数据，一般都存储在内存中\n电脑关闭后，这些数据就无了\n前提：javascript 是一种弱类型语言，JS的变量数据类型，是在程序运行的过程中，根据等号右边的值来确定的。\n&#x3D;&#x3D;面试高频点&#x3D;&#x3D;\nJS中一共有八种数据类型：\n基本数据类型(值类型)：String 字符串 、Number 数值、Bigint 大型数值、Boolean 布尔值、Null 空值、Undefined 未定义、Symbol。\n\n引用数据类型(引用类型)：Object对象\n注意：内置对象 Function Array Data RegExp Error 都是属于Object 类型\nBigint 与 Symol是ES6中新增的类型\n\n\n数据类型之间最大的区别：\n\n基本数据类型：参数赋值的时候，传数组\n引用数据类型：参数赋值的时候，传地址\n\n栗子\n基本数据类型举例：\nlet a = 23 let b = a a++console.log(a); // 24console.log(b); // 23\n\n上面的代码中：a 和 b 都是基本数据类型，让 b 等于 a，然后改变 a 的值之后，发现 b 的值并没有被改变。\n引用数据类型举例：\nlet obj1 = new Object();obj1.name = &#x27;zhangkai&#x27;let obj2 = obj1 //修改obj1obj1.name = &#x27;zk&#x27;console.log(obj1.name) // zkconsole.log(obj2.name) // zk \n\n我们首先记住一句话：JS 中，所有的变量都是保存在栈内存中的。\n总结\n基本数据类型，是直接保存在&#x3D;&#x3D;栈内存&#x3D;&#x3D;中的。值与值都是独立存在的\n引用数据类型，对象是保存在&#x3D;&#x3D;堆内存&#x3D;&#x3D;中的，而变量保存了对象的内存地址（对象的引用），保存在栈内存当中。如果两个变量保存了同一个对象的引用，当一个通过一个变量修改属性时，另一个也会受到影响。\n","categories":[],"tags":["JavaScript"]},{"title":"Mock.js","url":"/2022/06/15/Mock-js/","content":"上课听了老师说关于后端接口的问题 ,在我们前端如果需要测试渲染的时候，后端也没给数据这样就得自己造\n使用mockjs项目安装mock\nnpm install mockjs\n\n项目中新建mock文件\n//引入mock模块import Mock from &#x27;mockjs&#x27;\n\n将mock文件在main.js中导入\nimport Vue from &#x27;vue&#x27;import App FROM &#x27;./App.vue&#x27;import &#x27;./mock/index.js&#x27;Vue.config.productionTip = falsenew Vue(&#123;\trender:h =&gt; h(App),&#125;).$mount(&#x27;#app&#x27;)\n\nmock语法生成字符串\n生成指定次数字符串\n\nimport Mock from &#x27;mockjs&#x27;const data = Mock.mock(&#123;&quot;string|4&quot;:&quot;哈哈&quot;&#125;)\n\n\n生成指定范围长度字符串\n\nconst data = Mock.mock(&#123;&quot;string|1-8&quot;:&quot;哈哈&quot;&#125;)\n\n生成文本\n生成一个随机字符串\n\nconst data = Mock.mock(&#123;\t&quot;string&quot;:&quot;@cword&quot;&#125;) \n\n\n生成指定长度和范围\n\nconst data = Mock.mock(&#123;    string:&quot;@cword(1)&quot;    str :&quot;@cword(10,15)&quot;&#125;)\n\n生成标题和句子\n生成标题和句子\n\nconst data = Mock.mock(&#123;    title:&quot;@ctitle(8)&quot;    sentence:&quot;@csentence&quot;&#125;)\n\n\n生成指定长度的标题和句子\n\nconst data = Mock.mock(&#123;    title:&quot;@ctitle(8)&quot;    sentence:&quot;@csentence(50)&quot;&#125;)\n\n\n生成指定范围的\n\nconst data = Mock.mock(&#123;    title:&quot;@ctitle(5,8)&quot;    sentence:&quot;@csentence(50,100)&quot;&#125;)\n\n生成段落\n随机生成段落\n\nconst data = Mock.mock(&#123;  content:&quot;@cparagraph()&quot;&#125;)\n\n生成数字\n生成指定数字\n\nconst data = Mock.mock(&#123;\t&quot;number|80&quot;:1&#125;)\n\n\n生成范围数字\n\nconst data = Mock.mock(&#123;\t&quot;number|1-99&quot;:1&#125;)\n\n生成自增id\n随机生成标识\n\nconst data = Mock.mock(&#123;\tid:&quot;@increment&quot;&#125;)\n\n生成姓名-地址-身份证\n随机生成姓名-地址-身份证\n\nconst data = Mock.mock(&#123;\tname:&quot;@cname()&quot;\tidCard:&quot;@id()&quot;\taddress:&quot;@city(true)&quot;&#125;)\n\n随机生成图片\n生成图片：@image（“300*200”，‘#ff0000’,’#fff’,’gif’,’坤坤’）\n参数1：图片大小\n\n[\t&#x27;300*250&#x27;,&#x27;250*250&#x27;,&#x27;240*400&#x27;,&#x27;336*280&#x27;\t&#x27;180*150&#x27;,&#x27;720*300&#x27;,&#x27;468*60&#x27;,&#x27;234*60&#x27;\t&#x27;388*31&#x27;,&#x27;250*250&#x27;,&#x27;240*400&#x27;,&#x27;120*40&#x27;\t&#x27;125*125&#x27;,&#x27;250*250&#x27;,&#x27;240*400&#x27;,&#x27;336*280&#x27;]\n\n\n参数2：图片背景色\n\n参数3：图片前景色\n\n参数4：图片格式\n\n参数5：图片文字\n\n\n生成时间\n@Date\n生成指定格式时间：@date(yyyy-MM-dd hh:mm:ss)\n\n指定数组返回的参数\n\n指定长度：‘date|5’\n指定范围:’data|5-10’\n\nconst data = Mock.mock(&#123;&#x27;list|50-99&#x27;:[        &#123;            name:&#x27;@cname&#x27;            address:&#x27;@city(true)&#x27;            id:&#x27;@increment()&#x27;        &#125;\t    ]&#125;)\n\nmock拦截请求定义get请求Mock.mock(&#x27;api/get/news&#x27;,&#x27;get&#x27;,()=&gt;&#123;    return&#123;        status:200,        message:&quot;获取数据成功&quot;    &#125;&#125;)\n\n定义post请求Mock.mock(&#x27;api/post/news&#x27;,&#x27;post&#x27;,()=&gt;&#123;    return&#123;        status:200,        message:&quot;获取数据成功&quot;    &#125;&#125;)\n\n模拟一个登录请求async Login () &#123;    const res = await this.$http.post(&#x27;http://www.mock.com&#x27;,&#123;username:username,password:pasword&#125;)&#125;\n\nMock.js 建立数据拦截请求\n//用户信息数据let userInfo = [    &#123; username:&#x27;zs&#x27;,password:123456&#125;,    &#123; username:&#x27;ls&#x27;,password:123&#125;,    &#123; username:&#x27;yy&#x27;,password:456&#125;,]Mock.mock(&#x27;http://www.mock.com&#x27;,function(options)&#123;    console.log(options)//截取到post过来的数据     // 准备校验    let info = JSON.parse(options.body);  //抽取body并转化json    console.log(info);    let flag = false;    //遍历比对账号与密码    for(let i in userInfo)&#123;        if(userInfo[i].username == info.username &amp;&amp; userInfo[i].password == info.password)&#123;              flag = true ;              break;        &#125;    &#125;    if(flag)&#123;         return &#123;            code:200,            msg:&#x27;登录成功&#x27;,            Token:&#x27;Bera1242432567tgdhbshdgyu34y23885723&#x27;,        &#125;    &#125;else&#123;          return &#123;            code:400,            msg:&#x27;登录失败&#x27;,            &#125;    &#125;&#125;)\n\n","categories":[],"tags":["js插件"]},{"title":"利用HEXO+Github搭建属于自己的博客网站","url":"/2022/06/15/myblogs/","content":"使用 hexo 和 github 搭建属于自己博客网站前言  \n这几天在刷b站上 突然看到了 利用 gihub 加上 hexo 就可以直接搭建直接的博客，从昨天傍晚一直配置到今天，慢慢摸索出来 ! 所以先整理一份流程出来\n第一步 安装相关的工具1.安装Node.js\nhttps://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi\n\n2.安装Git\nhttps://github.com/git-for-windows/git/releases/download/v2.11.0.windows.3/Git-2.11.0.3-64-bit.exe\n\n3.打开cmd命令分别执行 检查是否安装成功\nnode -vnpm -vgit --version\n\n4.安装 Hexo\nnpm install hexo-cli -g//检查是否安装成功hexo -v\n\n第二步 配置github到这一步如果所有都安装成功，并测试无问题，那么本地配置已经搞定，下面开始在github上建项目\n在github上创建并设置远程仓库\n在Repository name下面填写你要创建的地址，这个地址是就是你的域名，以github.io结尾。**例如填写wapchief.github.io以后就在地址栏直接输入wapchief.github.io就可以访问网站\n下面要做的就是使用hexo模板将源码放到github。1.创建一个博客文件夹 \n//鼠标右键 git bash here \n\n1.npm install hexo --save\n\n2.hexo init \n\n3.npm install\n\n4.hexo g\n\n5.hexo s\n\n\n然后相当于开启了一个本地的服务器，会提升拷贝 浏览器\n随后打开进去就相当于配置本地hexo 模板成功！\n\n非常重要一步 初始化hexo 后到 该目录下的 _config.yml  文件下进行 github连接配置\ndeploy:  type: git  repository: https://github.com/111zhanglan/111zhanglan.github.io.git  branch: main\n\n安装主题、去 hexo 官方文档上 \nhttps://hexo.io/zh-cn/\n\n下载完 主题包后放置在 该目录下\n\n 随后到该主题文件下 的  _config.yml 下配置\n其他更多配置可以看看 主题的文档或者hexo官方文档了\n配置好后 我们就可以提交到github上了\nhexo ghexo shexo d\n\n最后就是最重要的写文章咯\nhexo new &#x27;文章名称&#x27;\n\n在文件夹的source目录下的 _posts 文件夹下 就会自动生成 一个文章的md文件 \n\n总结 过程中遇到的一些问题由于md文档的图片显示会与部署上去的图片地址不一\n解决方法\n1.添加依赖\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n\n2.然后把_config.yml中的post_asset_folder设为true，这个配置的意思是每次new post一个博客，会增加一个和博客同名的文件夹。\n\n3.把图!片放到.md文件的同名文件夹里，最后在.md文件中引用图片\n![图片描述]（./包名/NO.01.001.jpg）\n\n","categories":[],"tags":["分享"]}]